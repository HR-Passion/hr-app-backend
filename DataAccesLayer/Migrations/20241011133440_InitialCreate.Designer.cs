// <auto-generated />
using System;
using DataAccesLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccesLayer.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20241011133440_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccesLayer.Entities.Base.Contracts.ContractEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataInceputContract")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataSfarsitContract")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("NumarContract")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Salariu")
                        .HasColumnType("int");

                    b.Property<int>("StareCurentaId")
                        .HasColumnType("int");

                    b.Property<int>("TipContract")
                        .HasColumnType("int");

                    b.Property<int>("TipDurata")
                        .HasColumnType("int");

                    b.Property<int>("TipNorma")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CorId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("StareCurentaId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("DataAccesLayer.Entities.Base.Contracts.ContractStareEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataIncetareDetasare")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataIncetareSuspendare")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ContractStareEntity");
                });

            modelBuilder.Entity("DataAccesLayer.Entities.Base.Contracts.CorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Cod")
                        .HasColumnType("int");

                    b.Property<int>("Versiune")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CorEntity");
                });

            modelBuilder.Entity("DataAccesLayer.Entities.Base.Defaults.Default", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Defaults");
                });

            modelBuilder.Entity("DataAccesLayer.Entities.Base.Departments.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Manager")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("DataAccesLayer.Entities.Base.Employees.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CNP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfEmployeement")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DataAccesLayer.Entities.Base.Groups.Auxiliar.DetaliiGroupEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DomeniuActivitateId")
                        .HasColumnType("int");

                    b.Property<string>("Nume")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DomeniuActivitateId");

                    b.ToTable("DetaliiGroupEntity");
                });

            modelBuilder.Entity("DataAccesLayer.Entities.Base.Groups.Auxiliar.DomeniuActivitateEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Versiune")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DomeniuActivitateEntity");
                });

            modelBuilder.Entity("DataAccesLayer.Entities.Base.Groups.Auxiliar.JudetEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CodJudet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nume")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JudetEntity");
                });

            modelBuilder.Entity("DataAccesLayer.Entities.Base.Groups.Auxiliar.LocalitateEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CodSiruta")
                        .HasColumnType("int");

                    b.Property<Guid>("JudetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JudetId");

                    b.ToTable("LocalitateEntity");
                });

            modelBuilder.Entity("DataAccesLayer.Entities.Base.Groups.ContactEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReprezentantLegal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactEntity");
                });

            modelBuilder.Entity("DataAccesLayer.Entities.Base.Groups.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("Cui")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DetaliiId")
                        .HasColumnType("int");

                    b.Property<int>("LocalitateId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("DetaliiId");

                    b.HasIndex("LocalitateId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("DataAccesLayer.Entities.Base.Permisions.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TableId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("DataAccesLayer.Entities.Base.Roles.RoleUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RoleUsers");
                });

            modelBuilder.Entity("DataAccesLayer.Entities.Base.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEmployeed")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("PermissionRoles");
                });

            modelBuilder.Entity("Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DataAccesLayer.Entities.Base.Contracts.ContractEntity", b =>
                {
                    b.HasOne("DataAccesLayer.Entities.Base.Contracts.CorEntity", "Cor")
                        .WithMany("Contracts")
                        .HasForeignKey("CorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccesLayer.Entities.Base.Employees.Employee", "Employee")
                        .WithMany("Contracts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccesLayer.Entities.Base.Contracts.ContractStareEntity", "StareCurenta")
                        .WithMany()
                        .HasForeignKey("StareCurentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cor");

                    b.Navigation("Employee");

                    b.Navigation("StareCurenta");
                });

            modelBuilder.Entity("DataAccesLayer.Entities.Base.Defaults.Default", b =>
                {
                    b.HasOne("DataAccesLayer.Entities.Base.User", "User")
                        .WithOne()
                        .HasForeignKey("DataAccesLayer.Entities.Base.Defaults.Default", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccesLayer.Entities.Base.Departments.Department", b =>
                {
                    b.HasOne("DataAccesLayer.Entities.Base.Groups.Group", null)
                        .WithMany("DepartmentGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccesLayer.Entities.Base.Employees.Employee", b =>
                {
                    b.HasOne("DataAccesLayer.Entities.Base.Departments.Department", "Department")
                        .WithMany("DepartmentEmployees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccesLayer.Entities.Base.User", "User")
                        .WithOne()
                        .HasForeignKey("DataAccesLayer.Entities.Base.Employees.Employee", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccesLayer.Entities.Base.Groups.Auxiliar.DetaliiGroupEntity", b =>
                {
                    b.HasOne("DataAccesLayer.Entities.Base.Groups.Auxiliar.DomeniuActivitateEntity", "DomeniuActivitate")
                        .WithMany()
                        .HasForeignKey("DomeniuActivitateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DomeniuActivitate");
                });

            modelBuilder.Entity("DataAccesLayer.Entities.Base.Groups.Auxiliar.LocalitateEntity", b =>
                {
                    b.HasOne("DataAccesLayer.Entities.Base.Groups.Auxiliar.JudetEntity", "Judet")
                        .WithMany()
                        .HasForeignKey("JudetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Judet");
                });

            modelBuilder.Entity("DataAccesLayer.Entities.Base.Groups.Group", b =>
                {
                    b.HasOne("DataAccesLayer.Entities.Base.Groups.ContactEntity", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccesLayer.Entities.Base.Groups.Auxiliar.DetaliiGroupEntity", "Detalii")
                        .WithMany()
                        .HasForeignKey("DetaliiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccesLayer.Entities.Base.Groups.Auxiliar.LocalitateEntity", "Localitate")
                        .WithMany()
                        .HasForeignKey("LocalitateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Detalii");

                    b.Navigation("Localitate");
                });

            modelBuilder.Entity("DataAccesLayer.Entities.Base.User", b =>
                {
                    b.HasOne("DataAccesLayer.Entities.Base.Groups.Group", null)
                        .WithMany("Users")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.HasOne("DataAccesLayer.Entities.Base.Permisions.Permission", "Permission")
                        .WithMany("PermissionRoles")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Role", "Role")
                        .WithMany("PermissionRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataAccesLayer.Entities.Base.Contracts.CorEntity", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("DataAccesLayer.Entities.Base.Departments.Department", b =>
                {
                    b.Navigation("DepartmentEmployees");
                });

            modelBuilder.Entity("DataAccesLayer.Entities.Base.Employees.Employee", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("DataAccesLayer.Entities.Base.Groups.Group", b =>
                {
                    b.Navigation("DepartmentGroups");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DataAccesLayer.Entities.Base.Permisions.Permission", b =>
                {
                    b.Navigation("PermissionRoles");
                });

            modelBuilder.Entity("Role", b =>
                {
                    b.Navigation("PermissionRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
